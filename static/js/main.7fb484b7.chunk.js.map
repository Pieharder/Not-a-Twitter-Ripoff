{"version":3,"sources":["Components/MainFeed/AboutMe/AboutMe.js","Components/MainFeed/PostStream/Post/Post.js","Components/MainFeed/PostStream/PostStream.js","Components/MainFeed/UserInfo/UserInfo.js","Components/MainFeed/SuggestedUsers/SuggestedUsers.js","Components/MainFeed/MainFeed.js","Components/Header.js","Components/App.js","serviceWorker.js","index.js"],"names":["AboutMe","Fragment","className","Post","props","name","content","masterPostList","src","alt","PostStream","map","post","index","key","UserInfo","SuggestedUsers","mainFeed","Header","App","MainFeed","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"6PAYeA,MAVf,WACE,OACE,kBAAC,IAAMC,SAAP,KACE,yBAAKC,UAAU,YACb,6CCkBOC,MArBf,SAAcC,GACZ,OACE,kBAAC,IAAMH,SAAP,KACE,yBAAKC,UAAU,QACb,4BACGE,EAAMC,MAET,2BACGD,EAAME,SAET,gCCVFC,EAAiB,CACrB,CACEF,KAAM,MACNC,QAAS,yBAAKJ,UAAU,UAAUM,IAAI,kCAAkCC,IAAI,UAE9E,CACEJ,KAAM,gBACNC,QAAS,yBAAKJ,UAAU,UAAUM,IAAI,kCAAkCC,IAAI,UAE9E,CACEJ,KAAM,eACNC,QAAS,yBAAKJ,UAAU,UAAUM,IAAI,wHAAwHC,IAAI,UAEpK,CACEJ,KAAM,mBACNC,QAAS,yBAAKJ,UAAU,UAAUM,IAAI,kCAAkCC,IAAI,WAmBjEC,MAff,WACE,OACE,kBAAC,IAAMT,SAAP,KACE,yBAAKC,UAAU,cACb,6BACCK,EAAeI,KAAI,SAACC,EAAMC,GAAP,OAClB,kBAAC,EAAD,CAAMR,KAAMO,EAAKP,KACjBC,QAASM,EAAKN,QACdQ,IAAKD,UCZAE,MAhBf,WACE,OACE,kBAAC,IAAMd,SAAP,KACE,yBAAKC,UAAU,YACb,yBAAKA,UAAU,UAAUM,IAAI,6EAA6EC,IAAI,cAC9G,4CAEF,6BACE,gDACA,gDACA,+CCaOO,MAvBf,WACE,OACE,kBAAC,IAAMf,SAAP,KACE,yBAAKC,UAAU,kBACb,sCACA,4CAEF,yBAAKA,UAAU,kBACb,oCACA,4CAEF,yBAAKA,UAAU,kBACb,qCACA,4CAEF,yBAAKA,UAAU,kBACb,qCACA,8CCGOe,EAfE,WACf,OACE,yBAAKf,UAAU,YACb,yBAAKA,UAAU,YACb,kBAAC,EAAD,MACA,kBAAC,EAAD,OAEF,yBAAKA,UAAU,eACb,kBAAC,EAAD,OAEF,kBAAC,EAAD,QCTSgB,MANf,WACE,OACE,4CCUWC,MATf,WACE,OACE,kBAAC,IAAMlB,SAAP,KACE,kBAAC,EAAD,MACA,kBAACmB,EAAD,QCGcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.7fb484b7.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nfunction AboutMe() {\r\n  return (\r\n    <React.Fragment>\r\n      <div className=\"userInfo\">\r\n        <p>MY NAME JEF</p>\r\n      </div>\r\n    </React.Fragment>\r\n  )\r\n}\r\n\r\nexport default AboutMe;","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nfunction Post(props) {\r\n  return (\r\n    <React.Fragment>\r\n      <div className=\"post\">\r\n        <h3>\r\n          {props.name}\r\n        </h3>\r\n        <p>\r\n          {props.content}\r\n        </p>\r\n        <hr />\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nPost.propTypes = {\r\n  name: PropTypes.string.isRequired,\r\n  content: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default Post;","import React from \"react\";\r\nimport Post from \"./Post/Post\";\r\n\r\nconst masterPostList = [\r\n  {\r\n    name: \"bob\",\r\n    content: <img className=\"postPic\" src='https://i.imgur.com/Aou2YAV.png' alt='post' />\r\n  },\r\n  {\r\n    name: \"Todd on React\",\r\n    content: <img className=\"postPic\" src='https://i.imgur.com/PZcZHVf.png' alt='post' />\r\n  },\r\n  {\r\n    name: \"Donald Trump\",\r\n    content: <img className=\"postPic\" src='https://i.chzbgr.com/full/9159664384/hE0B2ABEB/trump-memes-meme-of-donald-trump-pulling-a-little-flag-out-of-his-nose' alt='post' />\r\n  },\r\n  {\r\n    name: \"Mr PoopyButtHole\",\r\n    content: <img className=\"postPic\" src='https://i.imgur.com/7m2W6RD.jpg' alt='post' />\r\n  }\r\n];\r\n\r\nfunction PostStream() {\r\n  return (\r\n    <React.Fragment>\r\n      <div className=\"postStream\">\r\n        <hr/>\r\n        {masterPostList.map((post, index) =>\r\n          <Post name={post.name}\r\n          content={post.content}\r\n          key={index}/>\r\n        )}\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default PostStream;","import React from 'react';\r\n\r\nfunction UserInfo() {\r\n  return (\r\n    <React.Fragment>\r\n      <div className=\"userInfo\">\r\n        <img className=\"userPic\" src=\"https://i.kym-cdn.com/entries/icons/original/000/016/894/mynameehhjeff.jpg\" alt=\"UserImage\" />\r\n        <h2>My Name Jef</h2>\r\n      </div>\r\n      <div>\r\n        <p>Slide into my DMs</p>\r\n        <p>Follow the Leader</p>\r\n        <p>My FoLOLowers</p>\r\n      </div>\r\n    </React.Fragment>\r\n  )\r\n}\r\n\r\nexport default UserInfo;","import React from 'react';\r\n\r\nfunction SuggestedUsers() {\r\n  return (\r\n    <React.Fragment>\r\n      <div className=\"suggestedUsers\">\r\n        <p>Todders</p>\r\n        <button>fololow</button>\r\n      </div>\r\n      <div className=\"suggestedUsers\">\r\n        <p>Jamie</p>\r\n        <button>fololow</button>\r\n      </div>\r\n      <div className=\"suggestedUsers\">\r\n        <p>Brooke</p>\r\n        <button>fololow</button>\r\n      </div>\r\n      <div className=\"suggestedUsers\">\r\n        <p>Travis</p>\r\n        <button>fololow</button>\r\n      </div>\r\n    </React.Fragment>\r\n  )\r\n}\r\n\r\nexport default SuggestedUsers;\r\n","import React from 'react';\r\nimport AboutMe from './AboutMe/AboutMe';\r\nimport PostStream from './PostStream/PostStream';\r\nimport UserInfo from './UserInfo/UserInfo';\r\nimport SuggestedUsers from './SuggestedUsers/SuggestedUsers';\r\n\r\n\r\nconst mainFeed = () => {\r\n  return (\r\n    <div className=\"mainFeed\">\r\n      <div className=\"userData\">\r\n        <UserInfo />\r\n        <AboutMe />\r\n      </div>\r\n      <div className=\"Suggestions\">\r\n        <SuggestedUsers />\r\n      </div>\r\n      <PostStream />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default mainFeed;","import React from \"react\";\r\n\r\nfunction Header(){\r\n  return (\r\n    <h1>NOT TWITTER</h1>\r\n  );\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\nimport './App.css';\r\nimport MainFeed from './MainFeed/MainFeed';\r\nimport Header from './Header';\r\n\r\nfunction App() {\r\n  return (\r\n    <React.Fragment>\r\n      <Header />\r\n      <MainFeed />\r\n    </React.Fragment>\r\n  )\r\n }\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './Components/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();"],"sourceRoot":""}